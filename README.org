* GENRIC-CL

GENERIC-CL provides a generic function wrapper over various functions
in the Common Lisp standard, such as equality predicates and sequence
operations. The goal of the wrapper is to provide a standard interface
to common operations, such as testing for the equality of two objects,
which is extensible to user-defined types.

** Usage

The generic function interface is contained in the ~GENERIC-CL~
package. This package should be used rather than ~COMMON-LISP~, as it
shadows the symbols, in the ~COMMON-LISP~ package, which name a
function for which there is a generic function wrapper. The
~GENERIC-CL~ additionally reexports the remaining non-shadowed symbols
in ~COMMON-LISP~.

** Generic Interfaces

The generic function interface consists of the following functions
divided into the following categories:

*** Equality

The equality interface provides functions for testing objects for
equality.

**** EQUALP

Generic Function: ~EQUALP A B~

Returns true if object ~A~ is equal to object ~B~.

Has methods specialized on the following types:

   - ~NUMBER NUMBER~

     Returns true if ~A~ and ~B~ represent the same numeric value,
     as per ~CL:=~.

   - ~CHARACTER CHARACTER~

     Returns true if ~A~ and ~B~ represent the same character, as per
     ~CL:CHAR=~.

   - ~CONS CONS~

     Returns true if the ~CAR~ of ~A~ is equal (by ~EQUALP~) to the
     ~CAR~ of ~B~ and if the ~CDR~ of ~A~ is equal (by ~EQUALP~) to
     the ~CDR~ of ~B~.

   - ~VECTOR VECTOR~

     Returns true if ~A~ and ~B~ are vectors of the same length and
     each element of ~A~ is equal (by ~EQUALP~) to the corresponding
     element of ~B~.

   - ~ARRAY ARRAY~

     Multi-dimensional arrays.

     Returns true if ~A~ and ~B~ have the same dimensions and each
     element of ~A~ is equal (by ~EQUALP~) to the corresponding
     element of ~B~.

   - ~STRING STRING~

     Returns true if both strings are equal (by ~CL:STRING=~).

   - ~PATHNAME PATHNAME~

     Returns true if both ~PATHNAME~ objects are functionally
     equivalent, as per the ~PATHNAME-EQUAL~ function from the
     ~CL-FAD~ library.

   - ~T T~

     Default method.

     Returns true if ~A~ and ~B~ are the same object,
     as per ~CL:EQ~.


**** =

Function: ~= X &REST XS~

Returns true if all objects in ~XS~ are equal (by ~EQUALP~) to ~X~.

**** /=

Function: ~= X &REST XS~

Returns true if at least one object in ~XS~ is not equal (by ~EQUALP~)
to ~X~.

*** Comparison

The comparison interface provides functions for comparing objects in
terms of greater than, less than, greater than or equal to and less
than or equal to relations.

**** LESSP

Generic Function: ~LESSP A B~

Returns true if object ~A~ is less than object ~B~.

It is sufficient to just implement this function, for user-defined
types, as the rest of the comparison functions have default (~T T~)
methods which are implemented in terms of ~LESSP~.

Has the following methods:

   - ~NUMBER NUMBER~

     Returns true if the numeric value of ~A~ is less than the numeric
     value of ~B~, by ~CL:<~.

   - ~CHARACTER CHARACTER~

     Returns true if the character code of ~A~ is less than the
     character code of ~B~, by ~CL:CHAR<~.

   - ~STRING STRING~

     Returns true if the string ~A~ is lexicographically less than
     ~B~, by ~CL:STRING<~.


**** LESS-EQUAL-P

Generic Function: ~LESS-EQUAL-P A B~

Returns true if object ~A~ is less than or equal to object ~B~.

Has the following methods:

   - ~NUMBER NUMBER~

     Returns true if the numeric value of ~A~ is less than or equal to
     the numeric value of ~B~, by ~CL:<=~.

   - ~CHARACTER CHARACTER~

     Returns true if the character code of ~A~ is less than or equal
     to the character code of ~B~, by ~CL:CHAR<=~.

   - ~STRING STRING~

     Returns true if the string ~A~ is lexicographically less than or
     equal to ~B~, by ~CL:STRING<=~.

   - ~T T~

     Returns true if either ~A~ is less than ~B~ (by ~LESSP~) or ~A~
     is equal to ~B~ (by ~EQUALP).

     #+BEGIN_SRC lisp
     (or (lessp a b) (equalp a b))
     #+END_SRC


**** GREATERP

Generic Function: ~GREATERP A B~

Returns true if object ~A~ is greater than object ~B~.

Has the following methods:

   - ~NUMBER NUMBER~

     Returns true if the numeric value of ~A~ is greater than the
     numeric value of ~B~, by ~CL:>~.

   - ~CHARACTER CHARACTER~

     Returns true if the character code of ~A~ is greater than the
     character code of ~B~, by ~CL:CHAR>~.

   - ~STRING STRING~

     Returns true if the string ~A~ is lexicographically greater than
     ~B~, by ~CL:STRING>~.

   - ~T T~

     Returns true if ~A~ is not less than or equal to ~B~, by ~LESS-EQUAL-P~.

     #+BEGIN_SRC lisp
     (not (less-equal-p a b))
     #+END_SRC


**** GREATER-EQUALP

Generic Function: ~GREATER-EQUAL-P A B~

Returns true if object ~A~ is greater than or equal to object ~B~.

Has the following methods:

   - ~NUMBER NUMBER~

     Returns true if the numeric value of ~A~ is greater than or equal
     to the numeric value of ~B~, by ~CL:>=~.

   - ~CHARACTER CHARACTER~

     Returns true if the character code of ~A~ is greater than or
     equal to the character code of ~B~, by ~CL:CHAR>=~.

   - ~STRING STRING~

     Returns true if the string ~A~ is lexicographically greater than
     or equal to ~B~, by ~CL:STRING>=~.

   - ~T T~

     Returns true if ~A~ is not less than ~B~, by ~LESSP~.

     #+BEGIN_SRC lisp
     (not (lessp a b))
     #+END_SRC


**** COMPARE

Generic Function: ~COMPARE A B~

Returns:

   - ~:LESS~ :: if ~A~ is less than ~B~.
   - ~:EQUAL~ :: if ~A~ is equal to ~B~.
   - ~:GREATER~ :: if ~A~ is greater than ~B~.

The default ~T T~ method returns:

   - ~:LESS~ :: if ~(LESSP A B)~ is true.
   - ~:EQUAL~ :: if ~(EQUALP A B)~ is true.
   - ~:GREATER~ :: otherwise.

**** >

Function: ~< X &REST XS~

Returns true if each argument is less than (by ~LESSP~) than the
following argument.

**** <=

Function: ~<= X &REST XS~

Returns true if each argument is less than or equal to (by ~LESS-EQUAL-P~)
than the following argument.

**** <

Function: ~> X &REST XS~

Returns true if each argument is greater than (by ~GREATERP~) than the
following argument.

**** >=

Function: ~>= X &REST XS~

Returns true if each argument is greater than or equal to (by
~GREATER-EQUAL-P~) than the following argument.

**** MIN

Function: ~MIN X &REST XS~

Returns the argument which is less than or equal to all other
arguments, the actual comparisons are performed using ~LESSP~. Any one
of the arguments which satisfies this condition may be returned.

**** MAX

Function: ~MAX X &REST XS~

Returns the argument which is greater than or equal to all other
arguments, the actual comparisons are performed using ~GREATERP~. Any
one of the arguments which satisfies this condition may be returned.

*** Arithmetic

The arithmetic interface provides generic functions for arithmetic
operations.

**** ADD

Generic Function: ~ADD A B~

Returns the sum of ~A~ and ~B~.

Methods:

   - ~NUMBER NUMBER~

     Returns ~(CL:+ A B)~.

**** SUBTRACT

Generic Function: ~SUBTRACT A B~

Returns the sum of ~A~ and ~B~.

Methods:

   - ~NUMBER NUMBER~

     Returns ~(CL:- A B)~.

**** MULTIPLY

Generic Function: ~MULTIPLY A B~

Returns the sum of ~A~ and ~B~.

Methods:

   - ~NUMBER NUMBER~

     Returns ~(CL:* A B)~.

**** DIVIDE

Generic Function: ~DIVIDE A B~

Returns the sum of ~A~ and ~B~. If ~A~ is the constant ~1~, the result
should be the reciprocal of ~B~.

Methods:

   - ~NUMBER NUMBER~

     Returns ~(CL:/ A B)~.

**** NEGATE

Generic Function: ~NEGATE A~

Returns the negation of ~A~.

Methods:

   - ~NUMBER~

     Returns ~(CL:- A)~.

**** +

Function: ~+ X &REST XS~

Returns the sum of all the arguments, computed by reducing over the
argument list with the ~ADD~ function.

If no arguments are provided, ~0~ is returned. If a single argument is
provided it is returned.

**** -

Function: ~- X &REST XS~

Returns the difference of all the arguments, computed by reducing over
the argument list with the ~SUBTRACT~ function.

If only a single argument is provided the negation of that argument is
returned, by the ~NEGATE~ function.

**** *

Function: ~* X &REST XS~

Returns the product of all the arguments, computed by reducing over
the argument list with the ~MULTIPLY~ function.

If no arguments are provided, ~1~ is returned. If a single argument is
provided it is returned.

**** /

Function: ~/ X &REST XS~

Returns the quotient of all the arguments, computed by reducing over
the argument list with the ~DIVIDE~ function.

If only a single argument is provided it, the reciprocal of that
argument, ~(DIVIDE 1 X)~, is returned.

**** 1+

Generic Function: ~1+ A~

Returns ~A + 1~.

Methods:

   - ~NUMBER~

     Returns ~(CL:1+ A)~.

   - ~T~

     Returns ~(ADD A 1)~.

**** 1-

Generic Function: ~1- A~

Returns ~A - 1~.

Methods:

   - ~NUMBER~

     Returns ~(CL:1- A)~.

   - ~T~

     Returns ~(SUBTRACT A 1)~.

**** INCF

Macro: ~INCF PLACE &OPTIONAL (DELTA 1)~

Increments the value of ~PLACE~ by ~DELTA~, which defaults to ~1~,
using the ~ADD~ function.

Effectively:

#+BEGIN_SRC lisp
(setf place (add place delta))
#+END_SRC

**** DECF

Macro: ~DECF PLACE &OPTIONAL (DELTA 1)~

Decrements the value of ~PLACE~ by ~DELTA~, which defaults to ~1~,
using the ~SUBTRACT~ function.

Effectively:

#+BEGIN_SRC lisp
(setf place (subtract place delta))
#+END_SRC

**** MINUSP

Generic Function: ~MINUSP A~

Returns true if ~A~ is less than zero.

Methods:

   - ~NUMBER~

     Returns ~(CL:MINUSP A)~.

   - ~T~

     Returns true if ~A~ compares less than ~0~, by ~LESSP~.

     #+BEGIN_SRC lisp
     (lessp a 0)
     #+END_SRC

**** PLUSP

Generic Function: ~PLUSP A~

Returns true if ~A~ is greater than zero.

Methods:

   - ~NUMBER~

     Returns ~(CL:PLUSP A)~.

   - ~T~

     Returns true if ~A~ compares greater than ~0~, by ~GREATERP~.

     #+BEGIN_SRC lisp
     (greaterp a 0)
     #+END_SRC

**** ZEROP

Generic Function: ~ZEROP A~

Returns true if ~A~ is equal to zero.

Methods:

   - ~NUMBER~

     Returns ~(CL:ZEROP A)~.

   - ~T~

     Returns true if ~A~ is equal to ~0~, by ~EQUALP~.

     #+BEGIN_SRC lisp
     (equalp a 0)
     #+END_SRC

**** SIGNUM

Generic Function: ~SIGNUM A~

Returns ~-1~, ~0~ or ~1~ depending on whether ~A~ is negative, ~A~ is
equal to zero or ~A~ is positive.

Methods:

   - ~SIGNUM~

     Returns ~(CL:SIGNUM A)~.

   - ~T~

     Returns ~-1~ if ~(MINUSP A)~ is true, ~0~ if ~(ZEROP A)~ is true,
     ~1~ otherwise.

**** ABS

Generic Function: ~ABS A~

Returns the absolute value of ~A~.

Methods:

   - ~NUMBER~

     Returns ~(CL:ABS A)~.

   - ~T~

     If ~(MINUSP A)~ is true, returns ~(NEGATE A)~ otherwise returns
     ~A~.

     #+BEGIN_SRC lisp
     (if (minusp a)
         (negate a)
         a)
     #+END_SRC

**** EVENP

Generic Function: ~EVENP A~

Returns true if ~A~ is even.

Methods:

   - ~NUMBER~

     Returns ~(CL:EVENP A)~

   - ~T~

     Returns ~(ZEROP (MOD A 2))~

**** ODDP

Generic Function: ~ODDP A~

Returns true if ~A~ is odd.

Methods:

   - ~NUMBER~

     Returns ~(CL:ODDP A)~

   - ~T~

     Returns ~(NOT (EVENP A))~


**** FLOOR

Generic Function: ~FLOOR N D~

Returns ~N~, or ~N/D~ if ~D~ is provided, rounded towards negative
infinity, as the first value, and the remainder of the division if
any, as the second return value.

Methods:

   - ~NUMBER~

     Returns ~(CL:FLOOR N D)~ if ~D~ is provided otherwise returns
     ~(CL:FLOOR N)~.

**** CEILING

Generic Function: ~CEILING N D~

Returns ~N~, or ~N/D~ if ~D~ is provided, rounded towards positive
infinity, as the first value, and the remainder of the division if
any, as the second return value.

Methods:

   - ~NUMBER~

     Returns ~(CL:CEILING N D)~ if ~D~ is provided otherwise returns
     ~(CL:CEILING N)~.

**** TRUNCATE

Generic Function: ~TRUNCATE N D~

Returns ~N~, or ~N/D~ if ~D~ is provided, rounded towards zero, as the
first value, and the remainder of the division if any, as the second
return value.

Methods:

   - ~NUMBER~

     Returns ~(CL:TRUNCATE N D)~ if ~D~ is provided otherwise returns
     ~(CL:TRUNCATE N)~.

**** ROUND

Generic Function: ~ROUND N D~

Returns ~N~, or ~N/D~ if ~D~ is provided, rounded towards the nearest
integer. If ~N~, or ~N/D~, lies exactly halfway between two integers,
it is rounded to the nearest even integer. The remainder of the
division if any, is returned as the second return value.

Methods:

   - ~NUMBER~

     Returns ~(CL:ROUND N D)~ if ~D~ is provided otherwise returns
     ~(CL:ROUND N)~.

**** MOD

Generic Function: ~MOD N D~

Returns the remainder of the ~FLOOR~ operation on ~N~ and ~D~.

Methods:

   - ~NUMBER~

     Returns ~(CL:MOD N D)~.

   - ~T~

     Returns the second return value of ~(FLOOR N D)~.

**** REM

Generic Function: ~REM N D~

Returns the remainder of the ~TRUNCATE~ operation on ~N~ and ~D~.

Methods:

   - ~NUMBER~

     Returns ~(CL:REM N D)~.

   - ~T~

     Returns the second return value of ~(TRUNCATE N D)~.

*** Objects

The object interface provides miscellaneous functions for manipulating
objects.

**** COPY

Generic Function: ~COPY OBJECT &KEY &ALLOW-OTHER-KEYS~

Returns a copy of ~OBJECT~. If ~OBJECT~ is mutable, by some other
functions, then the returned object should be distinct (not ~EQ~) from
~OBJECT~, otherwise the return value may be identical (~EQ~) to
~OBJECT~.

This function may accept additional keyword arguments which specify
certain options as to how the object should be copied. Methods
specialized on sequences accept a ~:DEEP~ keyword parameter, which if
provided and is true a deep copy is returned otherwise a shallow copy
is returned. If this applicable to a user-defined type, the ~COPY~
method for that type should also accept the ~DEEP~ keyword parameter.

Methods:

   - ~CONS~

     Returns a new list which contains all the elements in
     ~OBJECT~. If ~:DEEP~ is provided and is true, the list returned
     contains a copy of elements, copied using ~(COPY ELEM :DEEP T)~.

   - ~VECTOR~

     Returns a new vector which contains all the elements in
     ~OBJECT~. If ~:DEEP~ is provided and is true, the vector returned
     contains a copy of elements, copied using ~(COPY ELEM :DEEP T)~.

   - ~ARRAY~

     Multi-Dimensional Arrays.

     Returns a new array, of the same dimensions as ~OBJECT~, which
     contains all the elements in ~OBJECT~. If ~:DEEP~ is provided and
     is true, the array returned contains a copy of elements, copied
     using ~(COPY ELEM :DEEP T)~.

   - ~T~

     Simply returns ~OBJECT~.

     This method is provided to allow sequences containing arbitrary
     objects to be copied safely, without signaling a condition, and
     to avoid having to write simple pass-through methods for each
     user-defined type.

     However this means that if the object, for which there is no
     specialized copy method, can be mutated, the constraints of the
     ~COPY~ function are violated.


**** DEFSTRUCT

Macro: ~DEFSTRUCT OPTIONS &REST SLOTS~

This is the same as ~CL:DEFSTRUCT~ however a ~COPY~ method for the
structure type is automatically generated, which simply calls the
structure's copier function. If the ~(:COPIER NIL)~ option is
provided, the ~COPY~ method is not generated.

**** COERCE

Generic Function: ~COERCE OBJECT TYPE~

Coerces ~OBJECT~ to the type ~TYPE~.

The default (~T T~) method simply calls ~CL:COERCE~.

*** Iterator

The iterator interface is generic interface for iterating over the
elements of sequences and containers.

The iterator interface is implemented for lists, vectors,
multi-dimensional arrays and ~HASH-MAPS~.

**** Base Iterator Type

Structure: ~ITERATOR~

This structure serves as the base iterator type and is used as by
certain methods of generic functions to specialize on iterators.

All iterators should inherit from (include) ~ITERATOR~, in order for
methods which specialize on iterators to be invoked.

**** Iterator Creation

[[#iterator][ITERATOR]] is the high-level function for creating iterators, whereas
[[#make-iterator][MAKE-ITERATOR]] AND [[#make-reverse-iterator][MAKE-REVERSE-ITERATOR]] are the generic functions to
implement for creating iterators for user-defined sequence types.

***** MAKE-ITERATOR
      :PROPERTIES:
      :CUSTOM_ID: make-iterator
      :END:

Generic Function: ~MAKE-ITERATOR SEQUENCE START END~

Returns an iterator for the sub-sequence of ~SEQUENCE~, identified by
the range ~[START, END)~.

~START~ is the index of the first element to iterate over. ~0~
indicates the first element of the sequence.

~END~ is the index of the element at which to terminate the iteration,
i.e.  1 + the index of the last element to be iterated over. ~NIL~
indicates the end of the sequence.

***** MAKE-REVERSE-ITERATOR
      :PROPERTIES:
      :CUSTOM_ID: make-reverse-iterator
      :END:

Generic Function: ~MAKE-REVERSE-ITERATOR SEQUENCE START END~

Returns an iterator for the sub-sequence of ~SEQUENCE~, identified by
the range ~[START, END)~, in which the elements are iterated over in
reverse order.

Even though the elements are iterated over in reverse order, ~START~
and ~END~ are still relative to the start of the sequence, as in
~MAKE-ITERATOR~.

~START~ is the index of the last element to visit.

~END~ is the index of the element following the first element to be
iterated over.

***** ITERATOR
      :PROPERTIES:
      :CUSTOM_ID: iterator
      :END:

Function: ~ITERATOR SEQUENCE &KEY (START 0) END FROM-END~

Returns an iterator for the sub-sequence of ~SEQUENCE~ identified by
the range ~[START, END)~.

~START~ (defaults to ~0~ - the start of the sequence) and ~END~
(defaults to ~NIL~ - the end of the sequence) are the start and end
indices of the sub-sequence to iterated over (see [[#make-iterator][MAKE-ITERATOR]] and
[[#make-reverse-iterator][MAKE-REVERSE-ITERATOR]] for more information).

If ~FROM-END~ is true a reverse iterator is created (by
~MAKE-REVERSE-ITERATOR~) otherwise a normal iterator is created (by
~MAKE-ITERATOR~).

**** Mandatory Functions

These functions have to be implemented for all user-defined iterators.

***** AT

Generic Function: ~AT ITERATOR~

Returns the value of the element at the current position of the
iterator ~ITERATOR~.

The effects of calling this method, after the iterator has reached the
end of the subsequence are unspecified.

***** ENDP

Generic Function: ~ENDP ITERATOR~

Returns true if the iterator is at the end of the subsequence, false
otherwise.

The end of the subsequence is defined as the position past the last
element of the subsequence, that is the position of the iterating
after advancing it (by ~ADVANCE~) from the position of the last
element.

If the subsequence is empty ~ENDP~ should immediately return true.

*Note:* The default ~T~ method calls ~CL:ENDP~ since this function
shadows the ~CL:ENDP~ function.

***** ADVANCE

Generic Function: ~ADVANCE ITERATOR~

Advances the iterator to the next element in the subsequence. After
this method is called, subsequent calls to ~AT~ should return the next
element in the sequence or if the last element has already been
iterated over, ~ENDP~ should return true.

**** Optional Functions

Implementing the following functions for user-defined iterators is
optional either because, a default method is provided which is
implemented using the mandatory functions, or the function is only
used by a selected few sequence operations.

***** (SETF AT)

Generic Function: ~(SETF AT) VALUE ITERATOR~

Sets the value of the element at the position, in the sequence,
specified by the iterator.

The effects of calling this function when, the iterator is past the
end of the subsequence are unspecified.

Implementing this function is only mandatory if destructive sequence
operations will be used.

***** ADVANCE-N

Generic Function: ~ADVANCE-N ITERATOR N~

Advances the iterator by ~N~ elements. This position should be
equivalent to the positioned obtained by calling ~ADVANCE~ ~N~ times.

The default method simply calls ~ADVANCE~, on ~ITERATOR~, ~N~ times.

*** Collector
*** Sequence Operations
*** Generic Hash-Tables
*** Set Operations

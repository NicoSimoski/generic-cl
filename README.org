* GENRIC-CL

GENERIC-CL provides a generic function wrapper over various functions
in the Common Lisp standard, such as equality predicates and sequence
operations. The goal of the wrapper is to provide a standard interface
to common operations, such as testing for the equality of two objects,
which is extensible to user-defined types.

** Usage

The generic function interface is contained in the ~GENERIC-CL~
package. This package should be used rather than ~COMMON-LISP~, as it
shadows the symbols, in the ~COMMON-LISP~ package, which name a
function for which there is a generic function wrapper. The
~GENERIC-CL~ additionally reexports the remaining non-shadowed symbols
in ~COMMON-LISP~.

** Generic Interfaces

The generic function interface consists of the following functions
divided into the following categories:

*** Equality

The equality interface provides functions for testing objects for
equality.

**** EQUALP

Generic Function: ~EQUALP A B~

Returns true if object ~A~ is equal to object ~B~.

Has methods specialized on the following types:

   - ~NUMBER NUMBER~

     Returns true if ~A~ and ~B~ represent the same numeric value,
     as per ~CL:=~.

   - ~CHARACTER CHARACTER~

     Returns true if ~A~ and ~B~ represent the same character, as per
     ~CL:CHAR=~.

   - ~CONS CONS~

     Returns true if the ~CAR~ of ~A~ is equal (by ~EQUALP~) to the
     ~CAR~ of ~B~ and if the ~CDR~ of ~A~ is equal (by ~EQUALP~) to
     the ~CDR~ of ~B~.

   - ~VECTOR VECTOR~

     Returns true if ~A~ and ~B~ are vectors of the same length and
     each element of ~A~ is equal (by ~EQUALP~) to the corresponding
     element of ~B~.

   - ~ARRAY ARRAY~

     Multi-dimensional arrays.

     Returns true if ~A~ and ~B~ have the same dimensions and each
     element of ~A~ is equal (by ~EQUALP~) to the corresponding
     element of ~B~.

   - ~STRING STRING~

     Returns true if both strings are equal (by ~CL:STRING=~).

   - ~PATHNAME PATHNAME~

     Returns true if both ~PATHNAME~ objects are functionally
     equivalent, as per the ~PATHNAME-EQUAL~ function from the
     ~CL-FAD~ library.

   - ~T T~

     Default method.

     Returns true if ~A~ and ~B~ are the same object,
     as per ~CL:EQ~.


**** =

Function: ~= X &REST XS~

Returns true if all objects in ~XS~ are equal (by ~EQUALP~) to ~X~.

**** /=

Function: ~= X &REST XS~

Returns true if at least one object in ~XS~ is not equal (by ~EQUALP~)
to ~X~.

*** Comparison

The comparison interface provides functions for comparing objects in
terms of greater than, less than, greater than or equal to and less
than or equal to relations.

**** LESSP

Generic Function: ~LESSP A B~

Returns true if object ~A~ is less than object ~B~.

It is sufficient to just implement this function, for user-defined
types, as the rest of the comparison functions have default (~T T~)
methods which are implemented in terms of ~LESSP~.

Has the following methods:

   - ~NUMBER NUMBER~

     Returns true if the numeric value of ~A~ is less than the numeric
     value of ~B~, by ~CL:<~.

   - ~CHARACTER CHARACTER~

     Returns true if the character code of ~A~ is less than the
     character code of ~B~, by ~CL:CHAR<~.

   - ~STRING STRING~

     Returns true if the string ~A~ is lexicographically less than
     ~B~, by ~CL:STRING<~.


**** LESS-EQUAL-P

Generic Function: ~LESS-EQUAL-P A B~

Returns true if object ~A~ is less than or equal to object ~B~.

Has the following methods:

   - ~NUMBER NUMBER~

     Returns true if the numeric value of ~A~ is less than or equal to
     the numeric value of ~B~, by ~CL:<=~.

   - ~CHARACTER CHARACTER~

     Returns true if the character code of ~A~ is less than or equal
     to the character code of ~B~, by ~CL:CHAR<=~.

   - ~STRING STRING~

     Returns true if the string ~A~ is lexicographically less than or
     equal to ~B~, by ~CL:STRING<=~.

   - ~T T~

     Returns true if either ~A~ is less than ~B~ (by ~LESSP~) or ~A~
     is equal to ~B~ (by ~EQUALP).

     #+BEGIN_SRC lisp
     (or (lessp a b) (equalp a b))
     #+END_SRC


**** GREATERP

Generic Function: ~GREATERP A B~

Returns true if object ~A~ is greater than object ~B~.

Has the following methods:

   - ~NUMBER NUMBER~

     Returns true if the numeric value of ~A~ is greater than the
     numeric value of ~B~, by ~CL:>~.

   - ~CHARACTER CHARACTER~

     Returns true if the character code of ~A~ is greater than the
     character code of ~B~, by ~CL:CHAR>~.

   - ~STRING STRING~

     Returns true if the string ~A~ is lexicographically greater than
     ~B~, by ~CL:STRING>~.

   - ~T T~

     Returns true if ~A~ is not less than or equal to ~B~, by ~LESS-EQUAL-P~.

     #+BEGIN_SRC lisp
     (not (less-equal-p a b))
     #+END_SRC


**** GREATER-EQUALP

Generic Function: ~GREATER-EQUAL-P A B~

Returns true if object ~A~ is greater than or equal to object ~B~.

Has the following methods:

   - ~NUMBER NUMBER~

     Returns true if the numeric value of ~A~ is greater than or equal
     to the numeric value of ~B~, by ~CL:>=~.

   - ~CHARACTER CHARACTER~

     Returns true if the character code of ~A~ is greater than or
     equal to the character code of ~B~, by ~CL:CHAR>=~.

   - ~STRING STRING~

     Returns true if the string ~A~ is lexicographically greater than
     or equal to ~B~, by ~CL:STRING>=~.

   - ~T T~

     Returns true if ~A~ is not less than ~B~, by ~LESSP~.

     #+BEGIN_SRC lisp
     (not (lessp a b))
     #+END_SRC


**** COMPARE

Generic Function: ~COMPARE A B~

Returns:

   - ~:LESS~ :: if ~A~ is less than ~B~.
   - ~:EQUAL~ :: if ~A~ is equal to ~B~.
   - ~:GREATER~ :: if ~A~ is greater than ~B~.

The default ~T T~ method returns:

   - ~:LESS~ :: if ~(LESSP A B)~ is true.
   - ~:EQUAL~ :: if ~(EQUALP A B)~ is true.
   - ~:GREATER~ :: otherwise.

**** >

Function: ~< X &REST XS~

Returns true if each argument is less than (by ~LESSP~) than the
following argument.

**** <=

Function: ~<= X &REST XS~

Returns true if each argument is less than or equal to (by ~LESS-EQUAL-P~)
than the following argument.

**** <

Function: ~> X &REST XS~

Returns true if each argument is greater than (by ~GREATERP~) than the
following argument.

**** >=

Function: ~>= X &REST XS~

Returns true if each argument is greater than or equal to (by
~GREATER-EQUAL-P~) than the following argument.

**** MIN

Function: ~MIN X &REST XS~

Returns the argument which is less than or equal to all other
arguments, the actual comparisons are performed using ~LESSP~. Any one
of the arguments which satisfies this condition may be returned.

**** MAX

Function: ~MAX X &REST XS~

Returns the argument which is greater than or equal to all other
arguments, the actual comparisons are performed using ~GREATERP~. Any
one of the arguments which satisfies this condition may be returned.

*** Arithmetic

The arithmetic interface provides generic functions for arithmetic
operations.

**** ADD

Generic Function: ~ADD A B~

Returns the sum of ~A~ and ~B~.

Methods:

   - ~NUMBER NUMBER~

     Returns ~(CL:+ A B)~.

**** SUBTRACT

Generic Function: ~SUBTRACT A B~

Returns the sum of ~A~ and ~B~.

Methods:

   - ~NUMBER NUMBER~

     Returns ~(CL:- A B)~.

**** MULTIPLY

Generic Function: ~MULTIPLY A B~

Returns the sum of ~A~ and ~B~.

Methods:

   - ~NUMBER NUMBER~

     Returns ~(CL:* A B)~.

**** DIVIDE

Generic Function: ~DIVIDE A B~

Returns the sum of ~A~ and ~B~. If ~A~ is the constant ~1~, the result
should be the reciprocal of ~B~.

Methods:

   - ~NUMBER NUMBER~

     Returns ~(CL:/ A B)~.

**** NEGATE

Generic Function: ~NEGATE A~

Returns the negation of ~A~.

Methods:

   - ~NUMBER~

     Returns ~(CL:- A)~.

**** +

Function: ~+ X &REST XS~

Returns the sum of all the arguments, computed by reducing over the
argument list with the ~ADD~ function.

If no arguments are provided, ~0~ is returned. If a single argument is
provided it is returned.

**** -

Function: ~- X &REST XS~

Returns the difference of all the arguments, computed by reducing over
the argument list with the ~SUBTRACT~ function.

If only a single argument is provided the negation of that argument is
returned, by the ~NEGATE~ function.

**** *

Function: ~* X &REST XS~

Returns the product of all the arguments, computed by reducing over
the argument list with the ~MULTIPLY~ function.

If no arguments are provided, ~1~ is returned. If a single argument is
provided it is returned.

**** /

Function: ~/ X &REST XS~

Returns the quotient of all the arguments, computed by reducing over
the argument list with the ~DIVIDE~ function.

If only a single argument is provided it, the reciprocal of that
argument, ~(DIVIDE 1 X)~, is returned.

**** 1+

Function: ~1+ A~

Returns ~A + 1~ computed using ~ADD~.

#+BEGIN_SRC lisp
(add a 1)
#+END_SRC

**** 1-

Function: ~1- A~

Returns ~A - 1~ computed using ~SUBTRACT~.

#+BEGIN_SRC lisp
(subtract a 1)
#+END_SRC

**** INCF

Macro: ~INCF PLACE &OPTIONAL (DELTA 1)~

Increments the value of ~PLACE~ by ~DELTA~, which defaults to ~1~,
using the ~ADD~ function.

Effectively:

#+BEGIN_SRC lisp
(setf place (add place delta))
#+END_SRC

**** DECF

Macro: ~DECF PLACE &OPTIONAL (DELTA 1)~

Decrements the value of ~PLACE~ by ~DELTA~, which defaults to ~1~,
using the ~SUBTRACT~ function.

Effectively:

#+BEGIN_SRC lisp
(setf place (subtract place delta))
#+END_SRC

**** MINUSP

Generic Function: ~MINUSP A~

Returns true if ~A~ is less than zero.

Methods:

   - ~NUMBER~

     Returns ~(CL:MINUSP A)~.

   - ~T~

     Returns true if ~A~ compares less than ~0~, by ~LESSP~.

     #+BEGIN_SRC lisp
     (lessp a 0)
     #+END_SRC

**** PLUSP

Generic Function: ~PLUSP A~

Returns true if ~A~ is greater than zero.

Methods:

   - ~NUMBER~

     Returns ~(CL:PLUSP A)~.

   - ~T~

     Returns true if ~A~ compares greater than ~0~, by ~GREATERP~.

     #+BEGIN_SRC lisp
     (greaterp a 0)
     #+END_SRC

**** ZEROP

Generic Function: ~ZEROP A~

Returns true if ~A~ is equal to zero.

Methods:

   - ~NUMBER~

     Returns ~(CL:ZEROP A)~.

   - ~T~

     Returns true if ~A~ is equal to ~0~, by ~EQUALP~.

     #+BEGIN_SRC lisp
     (equalp a 0)
     #+END_SRC

**** SIGNUM

Generic Function: ~SIGNUM A~

Returns ~-1~, ~0~ or ~1~ depending on whether ~A~ is negative, ~A~ is
equal to zero or ~A~ is positive.

Methods:

   - ~SIGNUM~

     Returns ~(CL:SIGNUM A)~.

   - ~T~

     Returns ~-1~ if ~(MINUSP A)~ is true, ~0~ if ~(ZEROP A)~ is true,
     ~1~ otherwise.

**** ABS

Generic Function: ~ABS A~

Returns the absolute value of ~A~.

Methods:

   - ~NUMBER~

     Returns ~(CL:ABS A)~.

   - ~T~

     If ~(MINUSP A)~ is true, returns ~(NEGATE A)~ otherwise returns
     ~A~.

     #+BEGIN_SRC lisp
     (if (minusp a)
         (negate a)
         a)
     #+END_SRC

**** EVENP

Generic Function: ~EVENP A~

Returns true if ~A~ is even.

Methods:

   - ~NUMBER~

     Returns ~(CL:EVENP A)~

   - ~T~

     Returns ~(ZEROP (MOD A 2))~

**** ODDP

Generic Function: ~ODDP A~

Returns true if ~A~ is odd.

Methods:

   - ~NUMBER~

     Returns ~(CL:ODDP A)~

   - ~T~

     Returns ~(NOT (EVENP A))~


**** FLOOR

Generic Function: ~FLOOR N D~

Returns ~N~, or ~N/D~ if ~D~ is provided, rounded towards negative
infinity, as the first value, and the remainder of the division if
any, as the second return value.

Methods:

   - ~NUMBER~

     Returns ~(CL:FLOOR N D)~ if ~D~ is provided otherwise returns
     ~(CL:FLOOR N)~.

**** CEILING

Generic Function: ~CEILING N D~

Returns ~N~, or ~N/D~ if ~D~ is provided, rounded towards positive
infinity, as the first value, and the remainder of the division if
any, as the second return value.

Methods:

   - ~NUMBER~

     Returns ~(CL:CEILING N D)~ if ~D~ is provided otherwise returns
     ~(CL:CEILING N)~.

**** TRUNCATE

Generic Function: ~TRUNCATE N D~

Returns ~N~, or ~N/D~ if ~D~ is provided, rounded towards zero, as the
first value, and the remainder of the division if any, as the second
return value.

Methods:

   - ~NUMBER~

     Returns ~(CL:TRUNCATE N D)~ if ~D~ is provided otherwise returns
     ~(CL:TRUNCATE N)~.

**** ROUND

Generic Function: ~ROUND N D~

Returns ~N~, or ~N/D~ if ~D~ is provided, rounded towards the nearest
integer. If ~N~, or ~N/D~, lies exactly halfway between two integers,
it is rounded to the nearest even integer. The remainder of the
division if any, is returned as the second return value.

Methods:

   - ~NUMBER~

     Returns ~(CL:ROUND N D)~ if ~D~ is provided otherwise returns
     ~(CL:ROUND N)~.

**** MOD

Generic Function: ~MOD N D~

Returns the remainder of the ~FLOOR~ operation on ~N~ and ~D~.

Methods:

   - ~NUMBER~

     Returns ~(CL:MOD N D)~.

   - ~T~

     Returns the second return value of ~(FLOOR N D)~.

**** REM

Generic Function: ~REM N D~

Returns the remainder of the ~TRUNCATE~ operation on ~N~ and ~D~.

Methods:

   - ~NUMBER~

     Returns ~(CL:REM N D)~.

   - ~T~

     Returns the second return value of ~(TRUNCATE N D)~.

*** Objects
*** Iterator
*** Collector
*** Sequence Operations
*** Generic Hash-Tables
*** Set Operations
